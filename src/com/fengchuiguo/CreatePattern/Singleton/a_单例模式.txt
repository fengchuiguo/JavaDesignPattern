
单例模式
1：饿汉模式，加载慢，获取快，线程安全
2：懒汉模式，加载快，获取慢，线程不安全
单列模式分为：
饿汉式：声明的同时直接实例化。 特点：加载类时比较慢，但运行时获取对象的速度比较快，线程安全。
懒汉式：声明的时候不实例化。 特点：加载类时比较快，但运行时获取对象的速度比较慢，线程不安全。
实现单列模式的三个步骤：
1、将构造方法私有化，不允许外界直接创建对象。
2、声明类的唯一实例，使用private static修饰。
3、提供一个供外界获取实例的方法，使用public static修饰。

-----------------------

Singleton3
//    方法2、双重检查锁定
//   【注意*】此种方式需要将instance声明为 volatile；
//    也就是：private volatile static Singleton3 instance = null;

//    “双重检查加锁”机制的实现会使用关键字volatile，它的意思是：被volatile修饰的变量的值，
//    将不会被本地线程缓存，所有对该变量的读写都是直接操作共享内存，从而确保多个线程能正确的处理该变量。
//    注意：在java1.4及以前版本中，很多JVM对于volatile关键字的实现的问题，会导致“双重检查加锁”的失败，
//    因此“双重检查加锁”机制只只能用在java5及以上的版本。
//    由于volatile关键字可能会屏蔽掉虚拟机中一些必要的代码优化，所以运行效率并不是很高。
//    因此一般建议，没有特别的需要，不要使用。也就是说，虽然可以使用“双重检查加锁”机制来实现线程安全的单例，
//    但并不建议大量采用，可以根据情况来选用。

---------------------

