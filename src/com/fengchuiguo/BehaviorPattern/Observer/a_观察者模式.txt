观察者模式很好理解，类似于邮件订阅和RSS订阅，当我们浏览一些博客或wiki时，经常会看到RSS图标，就这的意思是，当你订阅了该文章，
如果后续有更新，会及时通知你。
其实，简单来讲就一句话：当一个对象变化时，其它依赖该对象的对象都会收到通知，并且随着变化！对象之间是一种一对多的关系。
观察者定义：
定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。
------------------------------------------------------------------------------------------------------------------------
JDK实现观察者模式:
[1]创建被观察者类，它继承自java.util.Observable类；
[2]创建观察者类，它实现java.util.Observer接口；
[3]对于被观察者类，添加它的观察者：void addObserver(Observer o)
addObserver()方法把观察者对象添加到观察者对象列表中。
当被观察事件发生时，执行：setChanged();notifyObservers();
setChange()方法用来设置一个内部标志位注明数据发生了变化；
notifyObservers()方法会去调用观察者对象列表中所有的Observer的update()方法，通知它们数据发生了变化。
只有在setChange()被调用后，notifyObservers()才会去调用update()。
[4]对于观察者类，实现Observer接口的唯一方法update
void update(Observable o, Object arg)
形参Object arg，对应一个由notifyObservers(Object arg);传递来的参数，当执行的是notifyObservers();时，arg为null。
------------------------------------------------------------------------------------------------------------------------
优点：
1、实现了观察者和目标之间的抽象耦合；目标只知道观察者接口，不知道观察者具体类；
2、实现了动态联动，控制联动范围；
3、支持广播通信，对注册的目标广播，可添加限制广播的范围。

缺点：可能会引起无谓的操作

推模型假定目标对象知道观察者需要的数据是什么；
拉模型是目标对象不知道观察者具体需要什么数据，把目标整个传给观察者，让它自取。

推模型使得观察者难以复用，可能存在目标对象没有考虑到的方面，从而需要定义新的update方法，或需要重新实现观察者。
拉模型，由于传的参数是本身，可以让观察者各取所需。

