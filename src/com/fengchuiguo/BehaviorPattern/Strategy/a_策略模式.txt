
策略模式将可变的部分从程序中抽象分离成算法接口，在该接口下分别封装一系列算法实现。

策略模式的决定权在用户，系统本身提供不同算法的实现，新增或者删除算法，对各种算法做封装。
因此，策略模式多用在算法决策系统中，外部用户只需要决定用哪个算法即可。

实际使用例子中：例如布局算法、支付算法中。

适用场景：
（1）许多相关的类仅仅是行为的差异
（2）运行时，选取不同的算法变体
（3）有多个if else条件判断的时候。
------------------------------------------------------------------------------------------------------------------------

以下根据demo2总结如下：

优点：
（1）使用了组合，使得框架更加灵活。
（2）富有弹性，可以较好的应对变化（开闭原则）
（3）更好的代码复用（相对于继承）。
（4）消除大量的条件语句。

缺点：
（1）客户代码需要了解每个策略实现的细节
（2）增加了对象的数目

