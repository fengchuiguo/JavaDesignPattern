该模式的思想就是将一个对象作为原型，对其进行复制、克隆，产生一个和原对象类似的新对象。

一个原型类，只需要实现Cloneable接口，覆写clone方法，此处clone方法可以改成任意的名称，因为Cloneable接口是个空接口，
你可以任意定义实现类的方法名，如cloneA或者cloneB，因为此处的重点是super.clone()这句话，super.clone()调用的是Object的clone()方法。

原型模式主要用于对象的复制，原型类（Prototype类）需要具备以下两个条件：
   实现Cloneable接口。
       在java语言有一个Cloneable接口，它的作用只有一个，就是在运行时通知虚拟机可以安全地在实现了此接口的类上使用clone方法。
       在java虚拟机中，只有实现了这个接口的类才可以被拷贝，否则在运行时会抛出CloneNotSupportedException异常。
   重写Object类中的clone方法。
       Java中，所有类的父类都是Object类，Object类中有一个clone方法，作用是返回对象的一个拷贝，但是其作用域protected类型的，
       一般的类无法调用，因此，Prototype类需要将clone方法的作用域修改为public类型。

----------
在这儿，我们结合对象的浅复制和深复制来说一下，首先需要了解对象深、浅复制的概念：
*浅复制：将一个对象复制后，基本数据类型的变量都会重新创建，而引用类型，指向的还是原对象所指向的。
*深复制：将一个对象复制后，不论是基本数据类型还有引用类型，都是重新创建的。简单来说，就是深复制进行了完全彻底的复制，而浅复制不彻底。

----------
原型模式的优点及适用场景
       使用原型模式创建对象比直接new一个对象在性能上要好的多，因为Object类的clone方法是一个本地方法，
       它直接操作内存中的二进制流，特别是复制大对象时，性能的差别非常明显。
       使用原型模式的另一个好处是简化对象的创建，使得创建对象就像我们在编辑文档时的复制粘贴一样简单。
       因为以上优点，所以在需要重复地创建相似对象时可以考虑使用原型模式。比如需要在一个循环体内创建对象，
       假如对象创建过程比较复杂或者循环次数很多的话，使用原型模式不但可以简化创建过程，
       而且可以使系统的整体性能提高很多。

原型模式的注意事项
       使用原型模式复制对象不会调用类的构造方法。因为对象的复制是通过调用Object类的clone方法来完成的，
       它直接在内存中复制数据，因此不会调用到类的构造方法。不但构造方法中的代码不会执行，
       甚至连访问权限都对原型模式无效。还记得单例模式吗？单例模式中，只要将构造方法的访问权限设置为private型，就可以实现单例。
       但是clone方法直接无视构造方法的权限，所以，单例模式与原型模式是冲突的，在使用时要特别注意。
       深拷贝与浅拷贝。Object类的clone方法只会拷贝对象中的基本的数据类型，对于数组、容器对象、引用对象等都不会拷贝，这就是浅拷贝。
       如果要实现深拷贝，可以将原型模式中的数组、容器对象、引用对象等另行拷贝。
       (*如果全部深拷贝的话，可以使用实例代码中deepClone()方式)。
       public class Prototype implements Cloneable {
       	private ArrayList list = new ArrayList();
       	public Prototype clone(){
       		Prototype prototype = null;
       		try{
       			prototype = (Prototype)super.clone();
       			prototype.list = (ArrayList) this.list.clone();
       		}catch(CloneNotSupportedException e){
       			e.printStackTrace();
       		}
       		return prototype;
       	}
       }
       由于ArrayList不是基本类型，所以成员变量list，不会被拷贝，需要我们自己实现深拷贝，
       幸运的是java提供的大部分的容器类都实现了Cloneable接口。所以实现深拷贝并不是特别困难。






